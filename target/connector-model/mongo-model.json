{
  "minMuleVersion": "3.5.0",
  "requiresEntitlement": false,
  "requiresEnterpriseLicense": false,
  "configs": [],
  "attributes": [],
  "processors": [
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "Result of the operation"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "newUsername",
          "description": "Name of the user"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "newPassword",
          "description": "Password that will be used for authentication"
        }
      ],
      "apiDocUrl": "",
      "javaName": "addUser",
      "friendlyName": "Add user",
      "description": "Adds a new user for this db\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:add-user}",
      "xsdName": "add-user"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [],
      "apiDocUrl": "",
      "javaName": "dropDatabase",
      "friendlyName": "Drop database",
      "description": "Drop the current database\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:drop-database}",
      "xsdName": "drop-database"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Collection\u003cString\u003e",
        "fullQualifiedJavaTypeName": "java.util.Collection\u003cjava.lang.String\u003e",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the list of names of collections available at this database"
      },
      "parameters": [],
      "apiDocUrl": "",
      "javaName": "listCollections",
      "friendlyName": "List collections",
      "description": "Lists names of collections available at this database\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:list-collections}",
      "xsdName": "list-collections"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "boolean",
        "fullQualifiedJavaTypeName": "boolean",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "if the collection exists"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection"
        }
      ],
      "apiDocUrl": "",
      "javaName": "existsCollection",
      "friendlyName": "Exists collection",
      "description": "Answers if a collection exists given its name\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:exists-collection}",
      "xsdName": "exists-collection"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection to drop"
        }
      ],
      "apiDocUrl": "",
      "javaName": "dropCollection",
      "friendlyName": "Drop collection",
      "description": "Deletes a collection and all the objects it contains. If the collection does\nnot exist, does nothing.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:drop-collection}",
      "xsdName": "drop-collection"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection to create"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "capped",
          "description": "if the collection will be capped"
        },
        {
          "javaTypeName": "Integer",
          "fullQualifiedJavaTypeName": "java.lang.Integer",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.lang.Integer",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "maxObjects",
          "description": "the maximum number of documents the new collection is able to contain"
        },
        {
          "javaTypeName": "Integer",
          "fullQualifiedJavaTypeName": "java.lang.Integer",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.lang.Integer",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "size",
          "description": "the maximum size of the new collection"
        }
      ],
      "apiDocUrl": "",
      "javaName": "createCollection",
      "friendlyName": "Create collection",
      "description": "Creates a new collection. If the collection already exists, a MongoException\nwill be thrown.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:create-collection}",
      "xsdName": "create-collection"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "String",
        "fullQualifiedJavaTypeName": "java.lang.String",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the id that was just insterted"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection where to insert the given object"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "dbObject",
          "description": "a {@link DBObject} instance."
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the optional write concern of insertion"
        }
      ],
      "apiDocUrl": "",
      "javaName": "insertObject",
      "friendlyName": "Insert object",
      "description": "Inserts an object in a collection, setting its id if necessary.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:insert-object}",
      "xsdName": "insert-object"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "String",
        "fullQualifiedJavaTypeName": "java.lang.String",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the id that was just insterted"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection where to insert the given object"
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "elementAttributes",
          "description": "alternative way of specifying the element as a literal Map inside a Mule Flow"
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the optional write concern of insertion"
        }
      ],
      "apiDocUrl": "",
      "javaName": "insertObjectFromMap",
      "friendlyName": "Insert object from map",
      "description": "Inserts an object in a collection, setting its id if necessary.\n\u003cp/\u003e\nA shallow conversion into DBObject is performed - that is, no conversion is\nperformed to its values.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:insert-object-from-map}",
      "xsdName": "insert-object-from-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection to update"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the {@link DBObject} query object used to detect the element to update. If the object Id is an instance of ObjectId you need to specify the value pair as map with the following structure: { \"_id\" : \"ObjectId(OBJECT_ID_VALUE)\"}"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "element",
          "description": "the {@link DBObject} mandatory object that will replace that one which matches the query."
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "upsert",
          "description": "if the database should create the element if it does not exist"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "true",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "multi",
          "description": "if all or just the first object matching the query will be updated"
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the write concern used to update"
        }
      ],
      "apiDocUrl": "",
      "javaName": "updateObjects",
      "friendlyName": "Update objects",
      "description": "Updates objects that matches the given query. If parameter multi is set to\nfalse, only the first document matching it will be updated. Otherwise, all\nthe documents matching it will be updated.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:update-objects}",
      "xsdName": "update-objects"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection to update"
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the query object used to detect the element to update. If the object Id is an instance of ObjectId you need to specify the value pair as map with the following structure: { \"_id\" : \"ObjectId(OBJECT_ID_VALUE)\"}"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "element",
          "description": "the {@link DBObject} mandatory object that will replace that one which matches the query."
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "upsert",
          "description": "if the database should create the element if it does not exist"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "true",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "multi",
          "description": "if all or just the first object matching the query will be updated"
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the write concern used to update"
        }
      ],
      "apiDocUrl": "",
      "javaName": "updateObjectsUsingQueryMap",
      "friendlyName": "Update objects using query map",
      "description": "Updates objects that matches the given query. If parameter multi is set to\nfalse, only the first document matching it will be updated. Otherwise, all\nthe documents matching it will be updated.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:update-objects-using-query-map}",
      "xsdName": "update-objects-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection to update"
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the query object used to detect the element to update."
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "elementAttributes",
          "description": "the mandatory object that will replace that one which matches the query."
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "upsert",
          "description": "if the database should create the element if it does not exist"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "true",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "multi",
          "description": "if all or just the first object matching the query will be updated"
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the write concern used to update"
        }
      ],
      "apiDocUrl": "",
      "javaName": "updateObjectsUsingMap",
      "friendlyName": "Update objects using map",
      "description": "Updates objects that matches the given query. If parameter multi is set to\nfalse, only the first document matching it will be updated. Otherwise, all\nthe documents matching it will be updated.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:update-objects-using-map}",
      "xsdName": "update-objects-using-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection to update"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "function",
          "description": "the function used to execute the update"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the {@link DBObject} query object used to detect the element to update."
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "element",
          "description": "the {@link DBObject} mandatory object that will replace that one which matches the query."
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "upsert",
          "description": "if the database should create the element if it does not exist"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "true",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "multi",
          "description": "if all or just the first object matching the query will be updated"
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the write concern used to update"
        }
      ],
      "apiDocUrl": "",
      "javaName": "updateObjectsByFunction",
      "friendlyName": "Update objects by function",
      "description": "Update objects using a mongo function\n\u003cp/\u003e\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:update-objects-by-function}",
      "xsdName": "update-objects-by-function"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection to update"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "function",
          "description": "the function used to execute the update"
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the query object used to detect the element to update."
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "elementAttributes",
          "description": "the mandatory object that will replace that one which matches the query."
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "upsert",
          "description": "if the database should create the element if it does not exist"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "true",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "multi",
          "description": "if all or just the first object matching the query will be updated"
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the write concern used to update"
        }
      ],
      "apiDocUrl": "",
      "javaName": "updateObjectsByFunctionUsingMap",
      "friendlyName": "Update objects by function using map",
      "description": "Update objects using a mongo function\n\u003cp/\u003e\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:update-objects-by-function-using-map}",
      "xsdName": "update-objects-by-function-using-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the collection where to insert the object"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "element",
          "description": "the mandatory {@link DBObject} object to insert."
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the write concern used to persist the object"
        }
      ],
      "apiDocUrl": "",
      "javaName": "saveObject",
      "friendlyName": "Save object",
      "description": "Inserts or updates an object based on its object _id.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:save-object}",
      "xsdName": "save-object"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the collection where to insert the object"
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "elementAttributes",
          "description": "the mandatory object to insert."
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the write concern used to persist the object"
        }
      ],
      "apiDocUrl": "",
      "javaName": "saveObjectFromMap",
      "friendlyName": "Save object from map",
      "description": "Inserts or updates an object based on its object _id.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:save-object-from-map}",
      "xsdName": "save-object-from-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the collection whose elements will be removed"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the optional {@link DBObject} query object. Objects that match it will be removed."
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the write concern used to remove the object"
        }
      ],
      "apiDocUrl": "",
      "javaName": "removeObjects",
      "friendlyName": "Remove objects",
      "description": "Removes all the objects that match the a given optional query. If query is\nnot specified, all objects are removed. However, please notice that this is\nnormally less performant that dropping the collection and creating it and its\nindices again\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:remove-objects}",
      "xsdName": "remove-objects"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the collection whose elements will be removed"
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the query object. Objects that match it will be removed."
        },
        {
          "javaTypeName": "WriteConcern",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.WriteConcern",
          "defaultValue": "DATABASE_DEFAULT",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.WriteConcern",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "writeConcern",
          "description": "the write concern used to remove the object"
        }
      ],
      "apiDocUrl": "",
      "javaName": "removeObjectsUsingQueryMap",
      "friendlyName": "Remove objects using query map",
      "description": "Removes all the objects that match the a given optional query. If query is\nnot specified, all objects are removed. However, please notice that this is\nnormally less performant that dropping the collection and creating it and its\nindices again\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:remove-objects-using-query-map}",
      "xsdName": "remove-objects-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Iterable\u003cDBObject\u003e",
        "fullQualifiedJavaTypeName": "java.lang.Iterable\u003ccom.mongodb.DBObject\u003e",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "an iterable that retrieves the resulting collection of"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection to map and reduce"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "mapFunction",
          "description": "a JavaScript encoded mapping function"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "reduceFunction",
          "description": "a JavaScript encoded reducing function"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "outputCollection",
          "description": "the name of the output collection to write the results, replacing previous collection if existed, mandatory when results may be larger than 16MB. If outputCollection is unspecified, the computation is performed in-memory and not persisted."
        }
      ],
      "apiDocUrl": "",
      "javaName": "mapReduceObjects",
      "friendlyName": "Map reduce objects",
      "description": "Transforms a collection into a collection of aggregated groups, by applying a\nsupplied element-mapping function to each element, that transforms each one\ninto a key-value pair, grouping the resulting pairs by key, and finally\nreducing values in each group applying a suppling \u0027reduce\u0027 function.\n\u003cp/\u003e\nEach supplied function is coded in JavaScript.\n\u003cp/\u003e\nNote that the correct way of writing those functions may not be obvious;\nplease consult MongoDB documentation for writing them.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:map-reduce-objects}",
      "xsdName": "map-reduce-objects"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "long",
        "fullQualifiedJavaTypeName": "long",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the amount of objects that matches the query"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the target collection"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the optional {@link DBObject} query for counting objects. Only objects matching it will be counted. If unspecified, all objects are counted."
        }
      ],
      "apiDocUrl": "",
      "javaName": "countObjects",
      "friendlyName": "Count objects",
      "description": "Counts the number of objects that match the given query. If no query is\npassed, returns the number of elements in the collection\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:count-objects}",
      "xsdName": "count-objects"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "long",
        "fullQualifiedJavaTypeName": "long",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the amount of objects that matches the query"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the target collection"
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the optional query for counting objects. Only objects matching it will be counted. If unspecified, all objects are counted."
        }
      ],
      "apiDocUrl": "",
      "javaName": "countObjectsUsingQueryMap",
      "friendlyName": "Count objects using query map",
      "description": "Counts the number of objects that match the given query. If no query is\npassed, returns the number of elements in the collection\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:count-objects-using-query-map}",
      "xsdName": "count-objects-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Iterable\u003cDBObject\u003e",
        "fullQualifiedJavaTypeName": "java.lang.Iterable\u003ccom.mongodb.DBObject\u003e",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "an iterable of {@link DBObject}"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the target collection"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the optional {@link DBObject} query object. If unspecified, all documents are returned."
        },
        {
          "javaTypeName": "List\u003cString\u003e",
          "fullQualifiedJavaTypeName": "java.util.List\u003cjava.lang.String\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.List\u003cjava.lang.String\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "fields",
          "description": "alternative way of passing fields as a literal List"
        },
        {
          "javaTypeName": "Integer",
          "fullQualifiedJavaTypeName": "java.lang.Integer",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.lang.Integer",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "numToSkip",
          "description": "number of objects skip (offset)"
        },
        {
          "javaTypeName": "Integer",
          "fullQualifiedJavaTypeName": "java.lang.Integer",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.lang.Integer",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "limit",
          "description": "limit of objects to return"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "sortBy",
          "description": "indicates the {@link DBObject} used to sort the results"
        }
      ],
      "apiDocUrl": "",
      "javaName": "findObjects",
      "friendlyName": "Find objects",
      "description": "Finds all objects that match a given query. If no query is specified, all\nobjects of the collection are retrieved. If no fields object is specified,\nall fields are retrieved.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:find-objects}",
      "xsdName": "find-objects"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Iterable\u003cDBObject\u003e",
        "fullQualifiedJavaTypeName": "java.lang.Iterable\u003ccom.mongodb.DBObject\u003e",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "an iterable of {@link DBObject}"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the target collection"
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the optional query object. If unspecified, all documents are returned."
        },
        {
          "javaTypeName": "List\u003cString\u003e",
          "fullQualifiedJavaTypeName": "java.util.List\u003cjava.lang.String\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.List\u003cjava.lang.String\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "fields",
          "description": "alternative way of passing fields as a literal List"
        },
        {
          "javaTypeName": "Integer",
          "fullQualifiedJavaTypeName": "java.lang.Integer",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.lang.Integer",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "numToSkip",
          "description": "number of objects skip (offset)"
        },
        {
          "javaTypeName": "Integer",
          "fullQualifiedJavaTypeName": "java.lang.Integer",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.lang.Integer",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "limit",
          "description": "limit of objects to return"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "sortBy",
          "description": "indicates the {@link DBObject} used to sort the results"
        }
      ],
      "apiDocUrl": "",
      "javaName": "findObjectsUsingQueryMap",
      "friendlyName": "Find objects using query map",
      "description": "Finds all objects that match a given query. If no query is specified, all\nobjects of the collection are retrieved. If no fields object is specified,\nall fields are retrieved.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:find-objects-using-query-map}",
      "xsdName": "find-objects-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "DBObject",
        "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "a {@link DBObject} that matches the query. If nothing matches and the"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the target collection"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the mandatory {@link DBObject} query object that the returned object matches."
        },
        {
          "javaTypeName": "List\u003cString\u003e",
          "fullQualifiedJavaTypeName": "java.util.List\u003cjava.lang.String\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.List\u003cjava.lang.String\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "fields",
          "description": "alternative way of passing fields as a literal List"
        },
        {
          "javaTypeName": "Boolean",
          "fullQualifiedJavaTypeName": "java.lang.Boolean",
          "defaultValue": "true",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.lang.Boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "failOnNotFound",
          "description": "Flag to specify if an exception will be thrown when no object is found. For backward compatibility the default value is true."
        }
      ],
      "apiDocUrl": "",
      "javaName": "findOneObject",
      "friendlyName": "Find one object",
      "description": "Finds the first object that matches a given query. Throws a\n{@link MongoException} if no one matches the given query\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:find-one-object}",
      "xsdName": "find-one-object"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "DBObject",
        "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "a {@link DBObject} that matches the query. If nothing matches and the"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the target collection"
        },
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the mandatory query object that the returned object matches."
        },
        {
          "javaTypeName": "List\u003cString\u003e",
          "fullQualifiedJavaTypeName": "java.util.List\u003cjava.lang.String\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.List\u003cjava.lang.String\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "fields",
          "description": "alternative way of passing fields as a literal List"
        },
        {
          "javaTypeName": "Boolean",
          "fullQualifiedJavaTypeName": "java.lang.Boolean",
          "defaultValue": "true",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.lang.Boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "failOnNotFound",
          "description": "Flag to specify if an exception will be thrown when no object is found. For backward compatibility the default value is true."
        }
      ],
      "apiDocUrl": "",
      "javaName": "findOneObjectUsingQueryMap",
      "friendlyName": "Find one object using query map",
      "description": "Finds the first object that matches a given query. Throws a\n{@link MongoException} if no one matches the given query\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:find-one-object-using-query-map}",
      "xsdName": "find-one-object-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection where the index will be created"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "field",
          "description": "the name of the field which will be indexed"
        },
        {
          "javaTypeName": "IndexOrder",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.IndexOrder",
          "defaultValue": "ASC",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": true,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.IndexOrder",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "order",
          "description": "the indexing order"
        }
      ],
      "apiDocUrl": "",
      "javaName": "createIndex",
      "friendlyName": "Create index",
      "description": "Creates a new index\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:create-index}",
      "xsdName": "create-index"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection where the index is"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "index",
          "description": "the name of the index to drop"
        }
      ],
      "apiDocUrl": "",
      "javaName": "dropIndex",
      "friendlyName": "Drop index",
      "description": "Drops an existing index\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:drop-index}",
      "xsdName": "drop-index"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Collection\u003cDBObject\u003e",
        "fullQualifiedJavaTypeName": "java.util.Collection\u003ccom.mongodb.DBObject\u003e",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "a collection of {@link DBObject} with indices information"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "collection",
          "description": "the name of the collection"
        }
      ],
      "apiDocUrl": "",
      "javaName": "listIndices",
      "friendlyName": "List indices",
      "description": "List existent indices in a collection\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:list-indices}",
      "xsdName": "list-indices"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "DBObject",
        "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the new GridFSFile {@link DBObject}"
      },
      "parameters": [
        {
          "javaTypeName": "Object",
          "fullQualifiedJavaTypeName": "java.lang.Object",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": true,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.lang.Object",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "payload",
          "description": "the mandatory content of the new gridfs file. It may be a java.io.File, a byte[] or an InputStream."
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "filename",
          "description": "the mandatory name of new file."
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "contentType",
          "description": "the optional content type of the new file"
        },
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "metadata",
          "description": "the optional {@link DBObject} metadata of the new content type"
        }
      ],
      "apiDocUrl": "",
      "javaName": "createFileFromPayload",
      "friendlyName": "Create file from payload",
      "description": "Creates a new GridFSFile in the database, saving the given content, filename,\ncontentType, and extraData, and answers it.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:create-file-from-payload}",
      "xsdName": "create-file-from-payload"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Iterable\u003cDBObject\u003e",
        "fullQualifiedJavaTypeName": "java.lang.Iterable\u003ccom.mongodb.DBObject\u003e",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "a {@link DBObject} files iterable"
      },
      "parameters": [
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "a {@link DBObject} query the optional query"
        }
      ],
      "apiDocUrl": "",
      "javaName": "findFiles",
      "friendlyName": "Find files",
      "description": "Lists all the files that match the given query\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:find-files}",
      "xsdName": "find-files"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Iterable\u003cDBObject\u003e",
        "fullQualifiedJavaTypeName": "java.lang.Iterable\u003ccom.mongodb.DBObject\u003e",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "a {@link DBObject} files iterable"
      },
      "parameters": [
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the optional query attributes"
        }
      ],
      "apiDocUrl": "",
      "javaName": "findFilesUsingQueryMap",
      "friendlyName": "Find files using query map",
      "description": "Lists all the files that match the given query\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:find-files-using-query-map}",
      "xsdName": "find-files-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "DBObject",
        "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "a {@link DBObject}"
      },
      "parameters": [
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the {@link DBObject} mandatory query"
        }
      ],
      "apiDocUrl": "",
      "javaName": "findOneFile",
      "friendlyName": "Find one file",
      "description": "Answers the first file that matches the given query. If no object matches it,\na MongoException is thrown.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:find-one-file}",
      "xsdName": "find-one-file"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "DBObject",
        "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "a {@link DBObject}"
      },
      "parameters": [
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the mandatory query"
        }
      ],
      "apiDocUrl": "",
      "javaName": "findOneFileUsingQueryMap",
      "friendlyName": "Find one file using query map",
      "description": "Answers the first file that matches the given query. If no object matches it,\na MongoException is thrown.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:find-one-file-using-query-map}",
      "xsdName": "find-one-file-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "InputStream",
        "fullQualifiedJavaTypeName": "java.io.InputStream",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "an InputStream to the file contents"
      },
      "parameters": [
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the {@link DBObject} mandatory query"
        }
      ],
      "apiDocUrl": "",
      "javaName": "getFileContent",
      "friendlyName": "Get file content",
      "description": "Answers an inputstream to the contents of the first file that matches the\ngiven query. If no object matches it, a MongoException is thrown.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:get-file-content}",
      "xsdName": "get-file-content"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "InputStream",
        "fullQualifiedJavaTypeName": "java.io.InputStream",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "an InputStream to the file contents"
      },
      "parameters": [
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the mandatory query attributes"
        }
      ],
      "apiDocUrl": "",
      "javaName": "getFileContentUsingQueryMap",
      "friendlyName": "Get file content using query map",
      "description": "Answers an inputstream to the contents of the first file that matches the\ngiven queryAttributes. If no object matches it, a MongoException is thrown.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:get-file-content-using-query-map}",
      "xsdName": "get-file-content-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Iterable\u003cDBObject\u003e",
        "fullQualifiedJavaTypeName": "java.lang.Iterable\u003ccom.mongodb.DBObject\u003e",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "an iterable of {@link DBObject}"
      },
      "parameters": [
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the {@link DBObject} optional query"
        }
      ],
      "apiDocUrl": "",
      "javaName": "listFiles",
      "friendlyName": "List files",
      "description": "Lists all the files that match the given query, sorting them by filename. If\nno query is specified, all files are listed.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:list-files}",
      "xsdName": "list-files"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Iterable\u003cDBObject\u003e",
        "fullQualifiedJavaTypeName": "java.lang.Iterable\u003ccom.mongodb.DBObject\u003e",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "an iterable of {@link DBObject}"
      },
      "parameters": [
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the optional query"
        }
      ],
      "apiDocUrl": "",
      "javaName": "listFilesUsingQueryMap",
      "friendlyName": "List files using query map",
      "description": "Lists all the files that match the given query, sorting them by filename. If\nno query is specified, all files are listed.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:list-files-using-query-map}",
      "xsdName": "list-files-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "defaultValue": "#[payload]",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "query",
          "description": "the {@link DBObject} optional query"
        }
      ],
      "apiDocUrl": "",
      "javaName": "removeFiles",
      "friendlyName": "Remove files",
      "description": "Removes all the files that match the given query. If no query is specified,\nall files are removed\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:remove-files}",
      "xsdName": "remove-files"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "Map\u003cString,Object\u003e",
          "fullQualifiedJavaTypeName": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "java.util.Map\u003cjava.lang.String,java.lang.Object\u003e",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "queryAttributes",
          "description": "the optional query"
        }
      ],
      "apiDocUrl": "",
      "javaName": "removeFilesUsingQueryMap",
      "friendlyName": "Remove files using query map",
      "description": "Removes all the files that match the given query. If no query is specified,\nall files are removed\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:remove-files-using-query-map}",
      "xsdName": "remove-files-using-query-map"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "DBObject",
        "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "The result of the command"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "commandName",
          "description": "The command to execute on the database"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "commandValue",
          "description": "The value for the command"
        }
      ],
      "apiDocUrl": "",
      "javaName": "executeCommand",
      "friendlyName": "Execute command",
      "description": "Executes a command on the database\n\u003cp/\u003e\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:remove-files}",
      "xsdName": "execute-command"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "defaultValue": "dump",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "outputDirectory",
          "description": "output directory path, if no output directory is provided the default /dump directory is assumed"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "outputName",
          "description": "output file name, if it\u0027s not specified the database name is used"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "zip",
          "description": "whether to zip the created dump file or not"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "oplog",
          "description": "point in time backup (requires an oplog)"
        },
        {
          "javaTypeName": "int",
          "fullQualifiedJavaTypeName": "int",
          "defaultValue": "5",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "int",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "threads",
          "description": "amount of threads to execute the dump"
        }
      ],
      "apiDocUrl": "",
      "javaName": "dump",
      "friendlyName": "Dump",
      "description": "Executes a dump of the database to the specified output directory. If no\noutput directory is provided then the default /dump directory is used.\n\u003cp/\u003e\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:dump}",
      "xsdName": "dump"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "defaultValue": "dump",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "outputDirectory",
          "description": "output directory path, if no output directory is provided the default /dump directory is assumed"
        },
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "incrementalTimestampFile",
          "description": "file that keeps track of the last timestamp processed, if no file is provided one is created on the output directory"
        }
      ],
      "apiDocUrl": "",
      "javaName": "incrementalDump",
      "friendlyName": "Incremental dump",
      "description": "Executes an incremental dump of the database\n\u003cp/\u003e\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:incremental-dump}",
      "xsdName": "incremental-dump"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "defaultValue": "dump",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "inputPath",
          "description": "input path to the dump files, it can be a directory, a zip file or just a bson file"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "drop",
          "description": "whether to drop existing collections before restore"
        },
        {
          "javaTypeName": "boolean",
          "fullQualifiedJavaTypeName": "boolean",
          "defaultValue": "false",
          "isOptional": true,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "boolean",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "oplogReplay",
          "description": "replay oplog for point-in-time restore"
        }
      ],
      "apiDocUrl": "",
      "javaName": "restore",
      "friendlyName": "Restore",
      "description": "Takes the output from the dump and restores it. Indexes will be created on a\nrestore. It only does inserts with the data to restore, if existing data is\nthere, it will not be replaced.\n\u003cp/\u003e\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:restore}",
      "xsdName": "restore"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [],
      "apiDocUrl": "",
      "javaName": "startConsistentRequest",
      "friendlyName": "Start consistent request",
      "description": "Begins a consistent request, which allows you to be sure that each subsequent\nrequest to MongoDB happens in sequence.\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:start-consistent-request}",
      "xsdName": "start-consistent-request"
    },
    {
      "isPaged": false,
      "isBatch": false,
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "",
        "fullQualifiedJavaTypeName": "void",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": ""
      },
      "parameters": [],
      "apiDocUrl": "",
      "javaName": "endConsistentRequest",
      "friendlyName": "End consistent request",
      "description": "Ends a consistent request.\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:end-consistent-request}",
      "xsdName": "end-consistent-request"
    }
  ],
  "filters": [],
  "transformers": [
    {
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "DBObject",
        "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the converted {@link DBObject}"
      },
      "parameters": [
        {
          "javaTypeName": "String",
          "fullQualifiedJavaTypeName": "java.lang.String",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": true,
          "typeMirror": "java.lang.String",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "input",
          "description": "the input for this transformer"
        }
      ],
      "apiDocUrl": "",
      "javaName": "jsonToDbobject",
      "friendlyName": "Json to dbobject",
      "description": "Convert JSON to DBObject.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:jsonToDbobject}",
      "xsdName": "json-to-dbobject"
    },
    {
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "String",
        "fullQualifiedJavaTypeName": "java.lang.String",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the converted string representation"
      },
      "parameters": [
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "input",
          "description": "the input for this transformer"
        }
      ],
      "apiDocUrl": "",
      "javaName": "dbobjectToJson",
      "friendlyName": "Dbobject to json",
      "description": "Convert DBObject to Json.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:dbobjectToJson}",
      "xsdName": "dbobject-to-json"
    },
    {
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "String",
        "fullQualifiedJavaTypeName": "java.lang.String",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the converted string representation"
      },
      "parameters": [
        {
          "javaTypeName": "BasicBSONList",
          "fullQualifiedJavaTypeName": "org.bson.types.BasicBSONList",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "org.bson.types.BasicBSONList",
          "isHttpCallback": false,
          "isArrayOrListOrMap": true,
          "javaName": "input",
          "description": "the input for this transformer"
        }
      ],
      "apiDocUrl": "",
      "javaName": "bsonListToJson",
      "friendlyName": "Bson list to json",
      "description": "Convert a BasicBSONList into Json.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:bsonListToJson}",
      "xsdName": "bson-list-to-json"
    },
    {
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "String",
        "fullQualifiedJavaTypeName": "java.lang.String",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the converted string representation"
      },
      "parameters": [
        {
          "javaTypeName": "MongoCollection",
          "fullQualifiedJavaTypeName": "org.mule.modules.module.mongo.api.MongoCollection",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "org.mule.modules.module.mongo.api.MongoCollection",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "input",
          "description": "the input for this transformer"
        }
      ],
      "apiDocUrl": "",
      "javaName": "mongoCollectionToJson",
      "friendlyName": "Mongo collection to json",
      "description": "Convert a BasicBSONList into Json.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample\nmongo:mongoCollectionToJson}",
      "xsdName": "mongo-collection-to-json"
    },
    {
      "samples": [],
      "javaReturnType": {
        "javaTypeName": "Map",
        "fullQualifiedJavaTypeName": "java.util.Map",
        "isOptional": false,
        "isRefOnly": false,
        "isPayload": false,
        "isComplexType": false,
        "isEnum": false,
        "isString": false,
        "isHttpCallback": false,
        "description": "the converted Map representation"
      },
      "parameters": [
        {
          "javaTypeName": "DBObject",
          "fullQualifiedJavaTypeName": "com.mongodb.DBObject",
          "isOptional": false,
          "isRefOnly": false,
          "isPayload": false,
          "isComplexType": false,
          "isEnum": false,
          "isString": false,
          "typeMirror": "com.mongodb.DBObject",
          "isHttpCallback": false,
          "isArrayOrListOrMap": false,
          "javaName": "input",
          "description": "the input for this transformer"
        }
      ],
      "apiDocUrl": "",
      "javaName": "dbObjectToMap",
      "friendlyName": "Db object to map",
      "description": "Convert a DBObject into Map.\n\u003cp/\u003e\n{@sample.xml ../../../doc/mongo-connector.xml.sample mongo:dbObjectToMap}",
      "xsdName": "db-object-to-map"
    }
  ],
  "sources": [],
  "javaName": "MongoCloudConnector",
  "friendlyName": "Mongo DB",
  "description": "MongoDB is an open source, high-performance, schema-free, document-oriented\ndatabase that manages collections of BSON documents.",
  "xsdName": "mongo"
}